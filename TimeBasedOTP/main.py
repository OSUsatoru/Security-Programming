import sys
import string
import struct
import base64
import hmac
import time
import requests



## -------- generate QR code -------------
## https://github.com/google/google-authenticator/wiki/Key-Uri-Format
def generate_URL(secret, userID):

    print("Generate QR code that encodes the URL.")
    print("URI contains secret keys along with the user id required for the TOTP algorithm.")

    type = "totp"
    issuer = "Provider1"
    label = issuer + "%20" ":" + userID

    ## I needed to add google charts url infromt of it
    ## https://stackoverflow.com/questions/34520928/how-to-generate-a-qr-code-for-google-authenticator-that-correctly-shows-issuer-d


    url_google_charts = "https://www.google.com/chart?chs=200x200&chld=M|0&cht=qr&chl="
    url = "otpauth://" + type + "/" + label + "?secret=" + secret + "&issuer=" + issuer
    url = url_google_charts + url
    print(url)

    ## to store image file from url
    ## https://qiita.com/ozaki_physics/items/c17ca626b480d352e90f
    file_name = "GA_QR_code.jpg"
    image = requests.get(url).content
    with open(file_name, 'wb') as file:
        file.write(image)

## -------- otp code -------------
##https://github.com/susam/mintotp#with-base32-key
##https://pypi.org/project/authenticator/ (psudo code)
##https://stackoverflow.com/questions/8529265/google-authenticator-implementation-in-python (discussion)


def generate_hotp(secret_key, counter, digits, digest):
    ## decode key
    secret_key = base64.b32decode(secret_key.upper()+'='*((8-len(secret_key))%8))
    ##print(secret_key)
    counter = struct.pack('>Q', counter)
    ##print(counter)
    mac = hmac.new(secret_key, counter, digest).digest()
    ##print(mac)
    ## int offset   =  hmac_result[19] & 0xf ;
    offset = mac[-1] & 0x0f
    ##print(offset)
    ## int bin_code = (hmac_result[offset]  & 0x7f) << 24
    ##     | (hmac_result[offset+1] & 0xff) << 16
    ##     | (hmac_result[offset+2] & 0xff) <<  8
    ##     | (hmac_result[offset+3] & 0xff) ;

    binary = struct.unpack('>L', mac[offset:offset+4])[0] & 0x7fffffff
    ##print(binary)
    ##print(str(binary)[-digits:].zfill(digits))
    return str(binary)[-digits:].zfill(digits)


def generate_totp(secret_key, time_step, digits, digest):
    ## T = (Current Unix time - T0) / X
    ## X represents the time step in seconds
    T = int(time.time()/time_step)
    return generate_hotp(secret_key, T, digits, digest)

def loop_generate_otp(secret):
    print("Generate generate an OTP which must match the OTP generated by the Google Authenticator for that 30 second period.")
    print("press (Ctrl+C) to exit")
    print("----- Start ----------")
    ## time_step: gen otp per time_step
    ## X represents the time step in seconds (default value X =30 seconds) and is a system parameter.
    ## and GA is using 30 sec
    ## digits: result digits
    ## GA is using 6 digits
    ## digest: sha1
    ## https://datatracker.ietf.org/doc/html/rfc4226#section-5
    ## In this section, we introduce the notation and describe the HOTP
    ## algorithm basic blocks -- the base function to compute an HMAC-SHA-1
    ## value and the truncation method to extract an HOTP value.
    starttime = time.time()
    while True:
        result = generate_totp(secret, 30, 6, 'sha1');
        print("OTP: ", result)
        ## https://stackoverflow.com/questions/474528/what-is-the-best-way-to-repeatedly-execute-a-function-every-x-seconds
        ## to mesure 30 sec (should start tight before entering this loop)
        ## print(30.0 - ((time.time() - starttime) % 30.0))

        time.sleep(30.0 - ((time.time() - starttime) % 30.0))

def main():


    user_ID = "default"
    ## this secret has to be Base32 string (RFC 4648 Base32 alphabet)
    ## https://datatracker.ietf.org/doc/html/rfc4648
    ## this is generated by Base32 alphabet generator
    secret = "OEUHF2KT3XYFNVGIJGXJSPRGLIZFGTAC"
    code_argv = False


    ## command userID
    ## userID is not typed, userID will be default
    if len(sys.argv) >=2 and len(sys.argv) <= 3:
        code_argv = True
    if code_argv:
        if len(sys.argv) == 3:
            user_ID = sys.argv[2];

        if sys.argv[1] == "--generate-qr":
            generate_URL(secret, user_ID)
        elif sys.argv[1] == "--get-otp":
            loop_generate_otp(secret)
        elif sys.argv[1] == "--for-debug":
            generate_URL(secret, user_ID)
            loop_generate_otp(secret)
        else:
            code_argv = False

    if code_argv == False:
        print("------- Valid Commands ---------")
        print("python main.py --generate-qr userID")
        print("python main.py --get-otp userID")
        print("---------------------------------")

if __name__ == "__main__":
    main()

